<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8" />
  <title>Jogo da Ana</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      font-family: Arial, sans-serif;
      touch-action: none;
    }
    #gameCanvas {
      display: block;
      margin: 0 auto;
      background-color: #000;
    }
    #info {
      position: absolute;
      top: 10px;
      left: 10px;
      color: #000;
      font-size: 18px;
      font-weight: bold;
      background: rgba(255, 255, 255, 0.6);
      padding: 10px;
      border-radius: 10px;
      z-index: 10;
    }
    #finalMsg {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 26px;
      color: #000;
      display: none;
      text-align: center;
      background: rgba(255, 255, 255, 0.8);
      padding: 20px;
      border-radius: 15px;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <canvas id="gameCanvas" width="400" height="600"></canvas>
  <div id="info">Pontuação: <span id="score">0</span> | Recorde: <span id="highScore">0</span></div>
  <div id="finalMsg">❤️ você é incrível<br>Ana Carollina Souza ❤️</div>

  <script>
    const canvas = document.getElementById("gameCanvas");
    const ctx = canvas.getContext("2d");

    const bgImage = new Image();
    bgImage.src = "https://harikacocuklarizmir.com/images/uploads/2dc834e1801c5d89034a2b8454d42ce8.jpg";

    const ballRadius = 7;
    let balls = [
      { x: canvas.width / 2, y: canvas.height - 30, dx: 3, dy: -3 },
      { x: canvas.width / 2 - 30, y: canvas.height - 50, dx: -2.5, dy: -3 }
    ];

    const paddleWidth = 80;
    const paddleHeight = 10;
    let paddleX = (canvas.width - paddleWidth) / 2;

    const heartLayout = [
      "000001111110000","000111111111000","001111111111100","011111111111110",
      "011111111111110","011111111111110","001111111111100","000111111111000",
      "000011111110000","000001111100000","000000111000000","000000010000000",
      "000000000000000"
    ];
    const brickRowCount = heartLayout.length;
    const brickColumnCount = heartLayout[0].length;
    const brickWidth = 24;
    const brickHeight = 20;
    const brickPadding = 4;
    const brickOffsetTop = 30;
    const brickOffsetLeft = 8;

    let bricks = [];
    function makeHeartLayout() {
      for (let r = 0; r < brickRowCount; r++) {
        bricks[r] = [];
        for (let c = 0; c < brickColumnCount; c++) {
          bricks[r][c] = { x:0,y:0,status: heartLayout[r][c]==="1"?1:0 };
        }
      }
    }
    makeHeartLayout();

    let score=0;
    let highScore=localStorage.getItem("highScoreAna")||0;
    document.getElementById("highScore").textContent=highScore;
    const totalBricks=bricks.flat().filter(b=>b.status===1).length;

    function drawBackground() {
      if (bgImage.complete && bgImage.naturalWidth !== 0) {
        ctx.drawImage(bgImage, 0, 0, canvas.width, canvas.height);
      } else {
        ctx.fillStyle = "#000";
        ctx.fillRect(0,0,canvas.width,canvas.height);
      }
    }

    function drawMesaAzul(){
      ctx.fillStyle = "#87CEFA";
      ctx.fillRect(0, canvas.height - 60, canvas.width, 60);
    }

    function drawBricks(){
      bricks.forEach((row,r)=>{
        row.forEach((b,c)=>{
          if(b.status===1){
            const x=c*(brickWidth+brickPadding)+brickOffsetLeft;
            const y=r*(brickHeight+brickPadding)+brickOffsetTop;
            b.x=x; b.y=y;
            ctx.fillStyle="#ff69b4";
            ctx.fillRect(x,y,brickWidth,brickHeight);
            ctx.fillStyle="#000"; ctx.font="14px Arial";
            ctx.fillText("❤️", x+4, y+15);
          }
        });
      });
    }

    function drawBall(){
      balls.forEach(ball=>{
        ctx.beginPath();
        ctx.arc(ball.x, ball.y, ballRadius,0,Math.PI*2);
        ctx.fillStyle="#ff69b4"; ctx.fill();
        ctx.closePath();
      });
    }

    function drawPaddle(){
      ctx.fillStyle="#fff";
      ctx.fillRect(paddleX, canvas.height - paddleHeight -10, paddleWidth, paddleHeight);
    }

    function collisionDetection(){
      balls.forEach(ball=>{
        bricks.forEach(row=> row.forEach(b=>{
          if(b.status===1 && ball.x > b.x && ball.x < b.x+brickWidth && ball.y > b.y && ball.y < b.y+brickHeight){
            ball.dy=-ball.dy;
            b.status=0;
            score++;
            document.getElementById("score").textContent=score;
            if(score>highScore){
              highScore=score;
              localStorage.setItem("highScoreAna",highScore);
              document.getElementById("highScore").textContent=highScore;
            }
            if(score===totalBricks){
              document.getElementById("finalMsg").style.display="block";
            }
          }
        }));
      });
    }

    function draw(){
      drawBackground();
      drawMesaAzul();
      drawBricks();
      drawBall();
      drawPaddle();
      collisionDetection();

      // movimentação + duplicação
      balls = balls.flatMap(ball => {
        if(ball.x+ball.dx > canvas.width-ballRadius || ball.x+ball.dx < ballRadius){
          ball.dx = -ball.dx;
        }
        if(ball.y+ball.dy < ballRadius){
          ball.dy = -ball.dy;
        } else if(ball.y+ball.dy > canvas.height-ballRadius-10){
          if(ball.x > paddleX && ball.x < paddleX+paddleWidth){
            ball.dy = -ball.dy;
            if(balls.length < 20){
              const newBall = {
                x: ball.x,
                y: ball.y,
                dx: (Math.random()>0.5?1:-1)*(2+Math.random()*2),
                dy: -3
              };
              return [ball,newBall];
            }
          } else {
            ball.x = canvas.width/2;
            ball.y = canvas.height-30;
            ball.dy = -3;
          }
        }
        ball.x += ball.dx;
        ball.y += ball.dy;
        return [ball];
      });

      requestAnimationFrame(draw);
    }

    document.addEventListener("mousemove", e=>{
      const rect=canvas.getBoundingClientRect();
      paddleX = e.clientX-rect.left-paddleWidth/2;
    });

    document.addEventListener("touchmove", e=>{
      e.preventDefault();
      const rect=canvas.getBoundingClientRect();
      paddleX = e.touches[0].clientX-rect.left-paddleWidth/2;
    }, { passive: false });

    // iniciar
    bgImage.onload = draw;
    // fallback
    setTimeout(draw, 500);
  </script>
</body>
</html>

